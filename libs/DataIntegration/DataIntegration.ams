## ams_version=1.0

LibraryModule DataIntegration {
	Prefix: di;
	Interface: Public_Declarations;
	Section Public_Declarations {
		Procedure pr_importRequestFile {
			Body: {
				webui::RequestFileUpload(onDone : 'di::pr_importExcel' );
			}
		}
		Procedure pr_importExcel {
			Arguments: (fname,statusCode,statusDescription);
			Body: {
				dex::GenerateDatasetMappings;
				
				!Delete old data
				empty Cargoes, Vessels, Locations, Routes;
				
				!Importeren van de data
				dex::AddMapping(
				    mappingName : "ImportData", 
				    mappingFile : "./Mappings/Generated/Import-Excel.xml");
				
				dex::ReadFromFile(
				    dataFile : fname, 
				    mappingName : "ImportData");
				
				!Activate all master data
				bp_activeCargoes(i_cargo):= 1;
				bp_activeVessels(i_vessel) := 1;
				bp_activeLocations(i_loc) := 1;
				
				!Changes to secondary actions
				ui::sp_systemSecondaryActions(3,'state'):= 'active';
				ui::sp_systemSecondaryActions(4,'state') := 'inactive';
				
				!Changes to status bar
				ui::sp_systemStatusBar(1,'icon') := "aimms-checkmark-circle";
				ui::sp_systemStatusBar(1,'color') := "Green";
				ui::sp_systemStatusBar(1,'tooltip') := "Data is succesfully imported.";
				ui::sp_systemStatusBar(2,'color') := "Orange";
				ui::sp_systemStatusBar(2,'icon'):= "aimms-circle2";
				ui::sp_systemStatusBar(2,'tooltip') := "Application ready to generate routes.";
				ui::sp_systemStatusBar(2,'state') := "active";
				ui::sp_systemStatusBar(3,'color') := "red";
				ui::sp_systemStatusBar(3,'icon') := "aimms-cancel-circle2";
				ui::sp_systemStatusBar(3,'tooltip') := "Model not ready to be solved.";
				ui::sp_systemStatusBar(3,'state') := 'inactive';
				ui::sp_systemStatusBar(4,'icon'):= "aimms-briefcase";
				ui::sp_systemStatusBar(4,'text') := fname;
				
				!Changes to workflow
				ui::sp_systemWorkflowSteps(1,8,'workflowPageState'):= "inactive";
				ui::sp_systemWorkflowSteps(1,9,'workflowPageState'):= "inactive";
				ui::sp_systemWorkflowSteps(1,10,'workflowPageState'):= "inactive";
				ui::sp_systemWorkflowSteps(1,11,'workflowPageState'):= "inactive";
				
				!Open Overview dataset
				ui::sp_systemWorkflowFoldingStates(1, 4, 'openclose') := "open";
			}
			StringParameter fname {
				Property: Input;
			}
			Parameter statusCode {
				Property: Output;
			}
			StringParameter statusDescription {
				Property: Output;
			}
		}
		Procedure pr_exportExcel {
			Body: {
				dex::AddMapping(
				    mappingName : "Import",
				    mappingFile : "./Mappings/Generated/Import-Excel.xml");
				
				dex::WriteToFile(
				    dataFile : "data\\FormatDataScheduling.xlsx",
				    mappingName : "Import");
			}
		}
		Procedure pr_emptyData {
			Body: {
				empty Data_Model;
				
				!Changes to secondary actions
				ui::sp_systemSecondaryActions(3,'state'):= 'inactive';
				ui::sp_systemSecondaryActions(4,'state') := 'inactive';
				
				!Changes to status bar
				ui::sp_systemStatusBar(1,'icon') := "aimms-circle2";
				ui::sp_systemStatusBar(1,'color') := "Orange";
				ui::sp_systemStatusBar(1,'tooltip') := "Click to import Excel file.";
				ui::sp_systemStatusBar(1,'text') := "Import Excel";
				ui::sp_systemStatusBar(2,'color') := "red";
				ui::sp_systemStatusBar(2,'icon'):= "aimms-cancel-circle2";
				ui::sp_systemStatusBar(2,'tooltip') := "Application not ready to generate routes.";
				ui::sp_systemStatusBar(2,'state') := "inactive";
				ui::sp_systemStatusBar(3,'color') := "red";
				ui::sp_systemStatusBar(3,'icon') := "aimms-cancel-circle2";
				ui::sp_systemStatusBar(3,'tooltip') := "Model not ready to be solved.";
				ui::sp_systemStatusBar(3,'state') := 'inactive';
				ui::sp_systemStatusBar(4,'icon'):= "aimms-warning2";
				ui::sp_systemStatusBar(4,'text') := "Nothing Imported";
				
				!Changes to workflow
				ui::sp_systemWorkflowSteps(1,8,'workflowPageState'):= "inactive";
				ui::sp_systemWorkFlowSteps(1,9,'workflowPageState'):= "inactive";
				ui::sp_systemWorkflowSteps(1,10,'workflowPageState'):= "inactive";
				ui::sp_systemWorkflowSteps(1,11,'workflowPageState'):= "inactive";
			}
		}
	}
	Section Private_Declarations {
		Section Library_Start_and_Finish {
			Procedure LibraryInitialization {
				Comment: "Add initialization statements here that do not require any other library being initialized already.";
			}
			Procedure PostLibraryInitialization {
				Comment: {
					"Add initialization statements here that require another library to be initialized already,
					or add statements that require the Data Management module to be initialized."
				}
			}
			Procedure PreLibraryTermination {
				Body: {
					return 1;
				}
				Comment: {
					"Add termination statements here that require all other libraries to be still alive.
					Return 1 if you allow the termination sequence to continue.
					Return 0 if you want to cancel the termination sequence."
				}
			}
			Procedure LibraryTermination {
				Body: {
					return 1;
				}
				Comment: {
					"Add termination statements here that do not require other libraries to be still alive.
					Return 1 to allow the termination sequence to continue.
					Return 0 if you want to cancel the termination sequence.
					It is recommended to only use the procedure PreLibraryTermination to cancel the termination sequence and let this procedure always return 1."
				}
			}
		}
	}
}
