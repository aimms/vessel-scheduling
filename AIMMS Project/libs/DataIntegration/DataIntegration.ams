## ams_version=1.0

LibraryModule DataIntegration {
	Prefix: di;
	Interface: Public_Declarations;
	Section Public_Declarations {
		Procedure pr_importRequestFile {
			Body: {
				webui::RequestFileUpload(onDone : 'di::pr_importExcel' );
			}
		}
		Procedure pr_importExcel {
			Arguments: (fname,statusCode,statusDescription);
			Body: {
				
				pr_actuallyImportExcel(fname);
			}
			StringParameter fname {
				Property: Input;
			}
			Parameter statusCode {
				Property: Output;
			}
			StringParameter statusDescription {
				Property: Output;
			}
		}
		Procedure pr_actuallyImportExcel {
			Arguments: (fname);
			Body: {
				!Delete old data
				empty Cargoes, Vessels, Locations, Routes;
				p_vesselVelocity := 37.04 [km/hour];
				
				block ! import a custom Excel file 
				
				    sp_loc_IOFilePath := webui::GetIOFilePath(fname);
				    dex::DeleteMapping(mappingName : "ImportDataSet");
				
				    dex::AddMapping(
				        mappingName : "ImportDataSet",
				        mappingFile : "Mappings/Generated/ImportDataSet-Excel.xml");
				
				    if dex::ReadFromFile(
				            dataFile : sp_loc_IOFilePath, 
				            mappingName : "ImportDataSet") then
				
				        !Activate all master data
				        bp_activeCargoes(i_cargo):= 1;
				        bp_activeVessels(i_vessel) := 1;
				        bp_activeLocations(i_loc) := 1;
				
				        ! displaying the status message, and logging it in the WebUI messages
				        sp_loc_message := "File was uploaded and read successfully.";
				        webui::ShowMessage('info', sp_loc_message);
				
				        !Changes to secondary actions
				        ui::sp_systemSecondaryActions(3,'state'):= 'active';
				        ui::sp_systemSecondaryActions(4,'state'):= 'inactive';
				
				        !Changes to status bar
				        ui::sp_systemStatusBar(1,'icon') := "aimms-checkmark-circle";
				        ui::sp_systemStatusBar(1,'color') := "Green";
				        ui::sp_systemStatusBar(1,'tooltip') := "Data is succesfully imported.";
				        ui::sp_systemStatusBar(1,'text') := "Data Imported";
				
				        ui::sp_systemStatusBar(2,'color') := "Orange";
				        ui::sp_systemStatusBar(2,'icon'):= "aimms-circle2";
				        ui::sp_systemStatusBar(2,'tooltip') := "Application ready to be solved.";
				        ui::sp_systemStatusBar(2,'state') := "active";
				
				        ui::sp_systemStatusBar(3,'icon'):= "aimms-briefcase";
				        ui::sp_systemStatusBar(3,'text') := fname;
				
				        !Changes to workflow
				        ui::sp_systemWorkflowSteps(1,8,'workflowPageState'):= "inactive";
				        ui::sp_systemWorkflowSteps(1,9,'workflowPageState'):= "inactive";
				        ui::sp_systemWorkflowSteps(1,10,'workflowPageState'):= "inactive";
				
				        !Open Overview dataset
				        ui::sp_systemWorkflowFoldingStates(1, 4, 'openclose') := "open";
				
				    endif;       
				
				onerror ep_err do
				
				    !displaying a custom error message
				    sp_loc_message := "Error when reading file " + errh::Message( ep_err ) + ".";
				    webui::ShowMessage('error', sp_loc_message);
				
				    errh::MarkAsHandled(ep_err) ;
				
				endblock;
			}
			StringParameter fname {
				Property: Input;
			}
			ElementParameter ep_err {
				Range: errh::PendingErrors;
			}
			StringParameter sp_loc_message;
			StringParameter sp_loc_IOFilePath;
		}
		Procedure pr_exportExcelInputFile {
			Body: {
				sp_loc_fileName := "InputData.xlsx";
				
				FileCopy("empty.xlsx", sp_loc_fileName);
				dex::DeleteMapping(mappingName : "ImportDataSet");
				
				dex::AddMapping(
				    mappingName : "ImportDataSet",
				    mappingFile : "Mappings/Generated/ImportDataSet-Excel.xml");
				
				! writing the output file locally
				dex::WriteToFile(
				    dataFile    :  sp_loc_fileName, 
					mappingName :  "ImportDataSet", 
					pretty      :  1);
				
				sp_loc_IOFilePath := webui::GetIOFilePath(sp_loc_fileName);
				
				!this is required so it works on the cloud
				FileCopy(sp_loc_fileName, sp_loc_IOFilePath);
				
				if FileExists(sp_loc_IOFilePath) then
				    webui::RequestFileDownload(sp_loc_IOFilePath);
				    webui::ShowMessage('info',"Export complete.");
				
				else
				    webui::ShowMessage('error',"Something went wrong when creating the file.");
				endif;
			}
			StringParameter sp_loc_IOFilePath;
			StringParameter sp_loc_fileName;
		}
		Procedure pr_emptyData {
			Body: {
				empty Data_Model;
				
				!Changes to secondary actions
				ui::sp_systemSecondaryActions(3,'state'):= 'inactive';
				ui::sp_systemSecondaryActions(4,'state') := 'inactive';
				
				!Changes to status bar
				ui::sp_systemStatusBar(1,'icon') := "aimms-circle2";
				ui::sp_systemStatusBar(1,'color') := "Orange";
				ui::sp_systemStatusBar(1,'tooltip') := "Click to import Excel file.";
				ui::sp_systemStatusBar(1,'text') := "Import Excel";
				
				ui::sp_systemStatusBar(2,'color') := "red";
				ui::sp_systemStatusBar(2,'icon') := "aimms-cancel-circle2";
				ui::sp_systemStatusBar(2,'tooltip') := "Model not ready to be solved.";
				ui::sp_systemStatusBar(2,'state') := 'inactive';
				
				ui::sp_systemStatusBar(3,'icon'):= "aimms-warning2";
				ui::sp_systemStatusBar(3,'text') := "Nothing Imported";
				
				!Changes to workflow
				ui::sp_systemWorkFlowSteps(1,8,'workflowPageState'):= "inactive";
				ui::sp_systemWorkflowSteps(1,9,'workflowPageState'):= "inactive";
				ui::sp_systemWorkflowSteps(1,10,'workflowPageState'):= "inactive";
			}
		}
		Procedure pr_actuallyExportSolutionFile {
			Body: {
				sp_loc_fileName := "Results.xlsx";
				
				FileCopy("empty.xlsx", sp_loc_fileName);
				dex::DeleteMapping(mappingName : "ExportResults");
				
				dex::AddMapping(
				    mappingName : "ExportResults",
				    mappingFile : "Mappings/Generated/ExportDataSet-Excel.xml");
				
				! writing the output file locally
				dex::WriteToFile(
				    dataFile    :  sp_loc_fileName, 
					mappingName :  "ExportResults", 
					pretty      :  1);
				
				sp_loc_IOFilePath := webui::GetIOFilePath(sp_loc_fileName);
				
				!this is required so it works on the cloud
				FileCopy(sp_loc_fileName, sp_loc_IOFilePath);
				
				if FileExists(sp_loc_IOFilePath) then
				    webui::RequestFileDownload(sp_loc_IOFilePath);
				    webui::ShowMessage('info',"Export complete.");
				
				else
				    webui::ShowMessage('error',"Something went wrong when creating the file.");
				endif;
			}
			StringParameter sp_loc_fileName;
			StringParameter sp_loc_IOFilePath;
		}
	}
	Section Private_Declarations {
		Section Library_Start_and_Finish {
			Procedure LibraryInitialization {
				Comment: "Add initialization statements here that do not require any other library being initialized already.";
			}
			Procedure PostLibraryInitialization {
				Comment: {
					"Add initialization statements here that require another library to be initialized already,
					or add statements that require the Data Management module to be initialized."
				}
			}
			Procedure PreLibraryTermination {
				Body: {
					return 1;
				}
				Comment: {
					"Add termination statements here that require all other libraries to be still alive.
					Return 1 if you allow the termination sequence to continue.
					Return 0 if you want to cancel the termination sequence."
				}
			}
			Procedure LibraryTermination {
				Body: {
					return 1;
				}
				Comment: {
					"Add termination statements here that do not require other libraries to be still alive.
					Return 1 to allow the termination sequence to continue.
					Return 0 if you want to cancel the termination sequence.
					It is recommended to only use the procedure PreLibraryTermination to cancel the termination sequence and let this procedure always return 1."
				}
			}
		}
	}
}
